"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –¶–°–°–ò –∏ –¶–ü–ì
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from constants import fill_constants
fill_constants()

def validate_wsdl_structures():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–µ–π WSDL —Å—Ö–µ–º–∞–º
    """
    print("\n" + "="*80)
    print("–í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–† –î–ê–ù–ù–´–• –ü–û WSDL")
    print("="*80)
    
    # –ê–Ω–∞–ª–∏–∑ wsdl_5.wsdl –¥–ª—è –¶–°–°–ò
    from wsdl_parser.wsdl_tester import get_types_from_wsdl
    
    print("\n1. –ê–Ω–∞–ª–∏–∑ wsdl_5.wsdl (–¶–°–°–ò)...")
    try:
        cssi_types = get_types_from_wsdl("wsdl_5.wsdl")
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: {len(cssi_types)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¶–°–°–ò
        main_types = ["Ukio", "PhoneCall", "Address", "CallContent", 
                      "Card01", "Card02", "Card03", "Card04", "CardAT", "CardCommServ"]
        
        for type_name in main_types:
            if type_name in cssi_types:
                fields_count = len(cssi_types[type_name])
                print(f"   ‚úÖ {type_name}: {fields_count} –ø–æ–ª–µ–π")
            else:
                print(f"   ‚ùå {type_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WSDL")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WSDL: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ cpg_wsdl_1.wsdl –¥–ª—è –¶–ü–ì
    print("\n2. –ê–Ω–∞–ª–∏–∑ cpg_wsdl_1.wsdl (–¶–ü–ì)...")
    import xml.etree.ElementTree as ET
    
    try:
        tree = ET.parse("cpg_wsdl_1.wsdl")
        root = tree.getroot()
        
        # –°—á–∏—Ç–∞–µ–º complexType —ç–ª–µ–º–µ–Ω—Ç—ã
        ns = {"xs": "http://www.w3.org/2001/XMLSchema"}
        complex_types = root.findall(".//xs:complexType", ns)
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: {len(complex_types)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¶–ü–ì
        cpg_types = {}
        for ct in complex_types:
            name = ct.get("name")
            if name:
                elements = ct.findall(".//xs:element", ns)
                cpg_types[name] = len(elements)
        
        main_cpg_types = ["Card", "Ier", "CommonData", "DdsData01", 
                          "Location", "Address", "Operator"]
        
        for type_name in main_cpg_types:
            if type_name in cpg_types:
                print(f"   ‚úÖ {type_name}: {cpg_types[type_name]} –ø–æ–ª–µ–π")
            else:
                print(f"   ‚ùå {type_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WSDL")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WSDL: {e}")
    
    return cssi_types, cpg_types


def validate_models():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ Pydantic –º–æ–¥–µ–ª–µ–π
    """
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Pydantic –º–æ–¥–µ–ª–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¶–°–°–ò
    print("\n   –ú–æ–¥–µ–ª–∏ –¶–°–°–ò:")
    try:
        from schemas.ukio_model import Ukio, Address, CallContent
        from schemas.phonecall import PhoneCall
        print("   ‚úÖ Ukio - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ Address - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CallContent - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ PhoneCall - –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¶–ü–ì
    print("\n   –ú–æ–¥–µ–ª–∏ –¶–ü–ì:")
    try:
        from schemas.cpg_models import (
            CPGCard, CPGIer, CPGCommonData, CPGDdsData01,
            CPGLocation, CPGAddress, CPGOperator,
            UpdateCardRequest
        )
        print("   ‚úÖ CPGCard - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGIer - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGCommonData - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGDdsData01 - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGLocation - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGAddress - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ CPGOperator - –∑–∞–≥—Ä—É–∂–µ–Ω")
        print("   ‚úÖ UpdateCardRequest - –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")


def check_converter():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    """
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ UKIO ‚Üí CPG...")
    
    from datetime import datetime
    from schemas.ukio_model import Ukio
    from converters.ukio_to_cpg import convert_ukio_to_cpg
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UKIO
    test_data = {
        "globalId": "CONV_TEST_001",
        "strIncidentType": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ",
        "dtSend": datetime.now(),
        "dtCreate": datetime.now(),
        "dtUpdate": datetime.now(),
        "nCasualties": 3,
        "bHumanThreat": 1,
        "bChs": 0,
        "bWrong": False,
        "bChildPlay": False
    }
    
    try:
        ukio = Ukio(**test_data)
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π UKIO —Å–æ–∑–¥–∞–Ω")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        card, ier = convert_ukio_to_cpg(ukio)
        
        if card and ier:
            print("   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            print(f"      - Card.Id112 = {card.Id112}")
            print(f"      - Card.ExtId = {card.ExtId}")
            print(f"      - Card.CommonData.TypeStr = {card.CommonData.TypeStr}")
            print(f"      - Ier.Id = {ier.Id}")
            print(f"      - Ier.IerType = {ier.IerType}")
        else:
            print("   ‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def check_xml_generation():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
    """
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML...")
    
    from datetime import datetime
    from schemas.ukio_model import Ukio
    from schemas.cpg_models import CPGCard, CPGIer, CPGCommonData, CPGLocation, CPGOperator
    import xml.etree.ElementTree as ET
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é Card
    try:
        card = CPGCard(
            Id112="XML_TEST_001",
            ExtId="EXT_TEST",
            Location=CPGLocation(),
            CommonData=CPGCommonData(
                TypeStr="–¢–µ—Å—Ç",
                RegionStr="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
                TimeIsoStr=datetime.now().isoformat()
            ),
            CreateOperator=CPGOperator(OperatorLogin="test_op"),
            LastChangeOperator=CPGOperator(OperatorLogin="test_op"),
            IncidentState="new",
            Created=datetime.now().isoformat(),
            Changed=datetime.now().isoformat()
        )
        print("   ‚úÖ CPGCard —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Ier
        ier = CPGIer(
            IerIsoTime=datetime.now().isoformat(),
            CgPn="112",
            AcceptOperator=CPGOperator(OperatorLogin="test_op"),
            IerType=1
        )
        print("   ‚úÖ CPGIer —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        card_dict = card.model_dump(exclude_none=True)
        ier_dict = ier.model_dump(exclude_none=True)
        
        print(f"   ‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è Card: {len(card_dict)} –ø–æ–ª–µ–π")
        print(f"   ‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è Ier: {len(ier_dict)} –ø–æ–ª–µ–π")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")


def analyze_differences():
    """
    –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π
    """
    print("\n" + "="*80)
    print("–ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –†–ê–ó–õ–ò–ß–ò–ô")
    print("="*80)
    
    differences = {
        "‚úÖ –ö–û–†–†–ï–ö–¢–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–û": [
            "‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π (globalId ‚Üí Id112)",
            "‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (strIncidentType ‚Üí TypeStr)",
            "‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö (nCasualties ‚Üí InjuredNumber)",
            "‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥ —É–≥—Ä–æ–∑—ã –ª—é–¥—è–º (bHumanThreat ‚Üí IsDanger)",
            "‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥ –ß–° (bChs ‚Üí Level)",
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (ExtId, HrId)",
            "‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Ukio –Ω–∞ Card + Ier",
            "‚Ä¢ –ù–æ–≤—ã–π namespace (http://tspg.service/)",
            "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ UpdateCardRequest"
        ],
        
        "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–û": [
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ Card01 ‚Üí DdsData01 (–¥—Ä—É–≥–∏–µ EOS –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)",
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∞–¥—Ä–µ—Å–æ–≤ (–Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è)",
            "‚Ä¢ –≠–†–ê-–ì–õ–û–ù–ê–°–° –º–∞–ø–ø–∏–Ω–≥ (–±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è)",
            "‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã (—Å–æ–∑–¥–∞—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)"
        ],
        
        "‚ùå –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û": [
            "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ CancelCard, AddReaction, FinishReaction, CloseCard",
            "‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã (MissedCall) –≤ –¶–ü–ì",
            "‚Ä¢ –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏)",
            "‚Ä¢ Card02, Card03, Card04, CardAT, CardCommServ –≤ –¶–ü–ì",
            "‚Ä¢ –ü–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª–µ–π Address",
            "‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ XSD —Å—Ö–µ–º–µ"
        ],
        
        "üîÑ –†–ê–ó–õ–ò–ß–ò–Ø –í –°–¢–†–£–ö–¢–£–†–ï": [
            "‚Ä¢ –¶–°–°–ò: –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π Ukio —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ",
            "‚Ä¢ –¶–ü–ì: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ Card (–∫–∞—Ä—Ç–æ—á–∫–∞) –∏ Ier (–æ–±—Ä–∞—â–µ–Ω–∏–µ)",
            "‚Ä¢ –¶–°–°–ò: PhoneCall —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "‚Ä¢ –¶–ü–ì: –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ Card (CreateOperator, LastChangeOperator)",
            "‚Ä¢ –¶–°–°–ò: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ EOS –∫–∞—Ä—Ç–æ—á–µ–∫",
            "‚Ä¢ –¶–ü–ì: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è DdsData01 —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª—É–∂–±—ã 01",
            "‚Ä¢ –¶–°–°–ò: globalId –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
            "‚Ä¢ –¶–ü–ì: –¢—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (Id112, ExtId, HrId)"
        ]
    }
    
    for category, items in differences.items():
        print(f"\n{category}")
        for item in items:
            print(item)


if __name__ == "__main__":
    print("\n" + "="*80)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–† –¶–°–°–ò –ò –¶–ü–ì")
    print("="*80)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è WSDL
    cssi_types, cpg_types = validate_wsdl_structures()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    validate_models()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    check_converter()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
    check_xml_generation()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
    analyze_differences()
    
    print("\n" + "="*80)
    print("–í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80)