"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ XML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¶–°–°–ò –∏ –¶–ü–ì —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from constants import fill_constants
fill_constants()

from datetime import datetime
import xml.etree.ElementTree as ET

def generate_cssi_example():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¶–°–°–ò XML
    """
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–ú–ï–†–ê –¶–°–°–ò ===")
    
    from schemas.ukio_model import Ukio, Address, CallContent, Ukios
    from schemas.phonecall import PhoneCall
    from schemas.string_eos import Operator
    from schemas.string_schemas import CardStates
    from schemas.eos_for_ukio_models import Card01
    from file_creator import create_file_from_model
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator = Operator(
        operatorId="cssi_op_001",
        strOperatorSurname="–ò–≤–∞–Ω–æ–≤",
        strOperatorName="–ò–≤–∞–Ω",
        strOperatorPost="–°—Ç–∞—Ä—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä 112"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫
    phone_call = PhoneCall(
        phoneCallId="call_001",
        dtSend=datetime.now(),
        dtCall=datetime.now(),
        dtConnect=datetime.now(),
        dtEndCall=datetime.now(),
        operator=operator,
        bOperatorIniciatied=False,
        aCallEnded=True,
        strCallerAddress="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
    address = Address(
        addressId="addr_001",
        strAddress="–≥. –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –¥. 1",
        strCity="–ú–æ—Å–∫–≤–∞",
        strCityKLADR="7700000000000",
        strCityFIAS="0c5b2444-70a0-4932-980c-b4dc0d3f02b5",
        strDistrict="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥",
        strStreet="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
        strHouse="1",
        geoLatitude=55.753544,
        geoLongitude=37.620211
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–≤–æ–Ω–∫–∞
    call_content = CallContent(
        callContentId="content_001",
        strLastName="–ü–µ—Ç—Ä–æ–≤",
        strName="–ü–µ—Ç—Ä",
        strMiddleName="–ü–µ—Ç—Ä–æ–≤–∏—á",
        strCallerContactPhone="+79161234567",
        strCgPN="+79161234567",
        appResAddress="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 10",
        strLanguage="ru",
        strIncidentDescription="–ü–æ–∂–∞—Ä –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞",
        appLocAddress="–≥. –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –¥. 1"
    )
    
    # –°–æ–∑–¥–∞–µ–º Card01 (–ø–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞)
    card01 = Card01(
        card01Id="card01_001",
        dtCreate=datetime.now(),
        strIncidentType="–ü–æ–∂–∞—Ä –≤ –∂–∏–ª–æ–º –¥–æ–º–µ",
        bObjectGasified=True,
        bNeedRescueWork=True,
        strStoreys="9",
        strEstimation="15",
        strObservedConsequencesFire="–°–∏–ª—å–Ω–æ–µ –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ, –≤–∏–¥–Ω–æ –ø–ª–∞–º—è",
        strCharacteristicsAccessRoads="–ü–æ–¥—ä–µ–∑–¥ —Å–≤–æ–±–æ–¥–µ–Ω",
        strCharacteristicsWorkingConditions="–°–∏–ª—å–Ω–æ–µ –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ",
        strEvacuationPossibilitiesAssessment="–≠–≤–∞–∫—É–∞—Ü–∏—è –ø–æ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º",
        strObjectOwnerInfo="–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –∂–∏–ª–æ–π –¥–æ–º"
    )
    
    # –°–æ–∑–¥–∞–µ–º Ukio
    ukio = Ukio(
        globalId="CSSI_EXAMPLE_001",
        strCardState=CardStates.status1,
        strIncidentType="–ü–æ–∂–∞—Ä",
        dtSend=datetime.now(),
        dtCreate=datetime.now(),
        dtUpdate=datetime.now(),
        dtCall=datetime.now(),
        dtCallEnd=datetime.now(),
        aCallEnded=True,
        nCasualties=2,
        bHumanThreat=1,
        bChs=0,
        strCallSource="–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
        bWrong=False,
        bChildPlay=False,
        phoneCall=[phone_call],
        address=address,
        callContent=call_content,
        card01=card01
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    ukios = Ukios(Ukios=[ukio])
    file_path = create_file_from_model(
        ukios,
        filename="example_cssi",
        basename="Ukios",
        region_name="examples"
    )
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    validate_cssi_structure(file_path)
    
    return file_path


def generate_cpg_example():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¶–ü–ì XML
    """
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–ú–ï–†–ê –¶–ü–ì ===")
    
    from schemas.cpg_models import (
        CPGCard, CPGIer, CPGOperator, CPGLocation, CPGAddress,
        CPGCoords, CPGCommonData, CPGDdsData01, CPGFullName
    )
    from file_creator_cpg import create_cpg_xml_file
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator = CPGOperator(
        OperatorLogin="cpg_op_001",
        OperatorPost="–°—Ç–∞—Ä—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä",
        OperatorInfo="–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        OperatorName="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
    address = CPGAddress(
        City="–ú–æ—Å–∫–≤–∞",
        CityCode="7700000000000",
        CityFiasId="0c5b2444-70a0-4932-980c-b4dc0d3f02b5",
        District="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥",
        Street="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
        HouseNumber="1",
        Floor=3,
        IsNear=False
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coords = CPGCoords(
        Latitude="55.753544",
        Longitude="37.620211"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    location = CPGLocation(
        Address=address,
        Coords=coords
    )
    
    # –°–æ–∑–¥–∞–µ–º CommonData
    common_data = CPGCommonData(
        TypeStr="–ü–æ–∂–∞—Ä",
        RegionStr="–≥. –ú–æ—Å–∫–≤–∞",
        HrId="INC-12345",
        Description="–ü–æ–∂–∞—Ä –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞",
        LostNumber=0,
        InjuredNumber=2,
        IsDanger=True,
        IsBlocking=False,
        TimeIsoStr=datetime.now().isoformat(),
        Level=0
    )
    
    # –°–æ–∑–¥–∞–µ–º DdsData01
    dds_data = CPGDdsData01(
        DdsTypeStr="–ü–æ–∂–∞—Ä –≤ –∂–∏–ª–æ–º –¥–æ–º–µ",
        HasGas=True,
        NeedRescue=True,
        FloorCount=9,
        FireTime=15,
        FireEffects="–°–∏–ª—å–Ω–æ–µ –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ, –≤–∏–¥–Ω–æ –ø–ª–∞–º—è",
        DrivewaysState="–ü–æ–¥—ä–µ–∑–¥ —Å–≤–æ–±–æ–¥–µ–Ω",
        WorkingConditions="–°–∏–ª—å–Ω–æ–µ –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ",
        EvacuationPossibility="–≠–≤–∞–∫—É–∞—Ü–∏—è –ø–æ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º",
        OwnersAndTenantsInfo="–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –∂–∏–ª–æ–π –¥–æ–º"
    )
    
    # –°–æ–∑–¥–∞–µ–º Card
    card = CPGCard(
        Id112="CPG_EXAMPLE_001",
        ExtId="EXT_ABCD1234",
        Location=location,
        CommonData=common_data,
        DdsData01=dds_data,
        CreateOperator=operator,
        LastChangeOperator=operator,
        IncidentState="new",
        Created=datetime.now().isoformat(),
        Changed=datetime.now().isoformat()
    )
    
    # –°–æ–∑–¥–∞–µ–º FullName
    full_name = CPGFullName(
        LastName="–ü–µ—Ç—Ä–æ–≤",
        FirstName="–ü–µ—Ç—Ä",
        MiddleName="–ü–µ—Ç—Ä–æ–≤–∏—á"
    )
    
    # –°–æ–∑–¥–∞–µ–º Ier
    ier = CPGIer(
        Id="IER_EXAMPLE_001",
        IerIsoTime=datetime.now().isoformat(),
        CgPn="+79161234567",
        FullName=full_name,
        AcceptOperator=operator,
        Text="–°—Ä–æ—á–Ω–æ! –ü–æ–∂–∞—Ä –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ, –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ",
        IerType=1,
        HrId="IER-12345",
        Location=CPGLocation(
            Address=CPGAddress(
                City="–ú–æ—Å–∫–≤–∞",
                Street="–ê—Ä–±–∞—Ç",
                HouseNumber="10"
            )
        )
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    file_path = create_cpg_xml_file(
        card=card,
        ier=ier,
        filename="example_cpg",
        region_name="examples"
    )
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    validate_cpg_structure(file_path)
    
    return file_path


def validate_cssi_structure(file_path):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¶–°–°–ò XML
    """
    print("\nüìã –í–∞–ª–∏–¥–∞—Ü–∏—è –¶–°–°–ò —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace
        if "s112" in root.tag:
            print("  ‚úÖ Namespace s112 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π namespace: {root.tag}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        checks = {
            ".//globalId": "globalId (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)",
            ".//strCallSource": "strCallSource (–∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞)",
            ".//bWrong": "bWrong (–ª–æ–∂–Ω—ã–π –≤—ã–∑–æ–≤)",
            ".//bChildPlay": "bChildPlay (–¥–µ—Ç—Å–∫–∞—è —à–∞–ª–æ—Å—Ç—å)",
            ".//phoneCall": "phoneCall (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫)",
            ".//address": "address (–∞–¥—Ä–µ—Å)",
            ".//card01": "card01 (–∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∂–∞—Ä–Ω–æ–π —Å–ª—É–∂–±—ã)"
        }
        
        for xpath, description in checks.items():
            element = root.find(xpath)
            if element is not None:
                value = element.text if element.text else "(–æ–±—ä–µ–∫—Ç)"
                print(f"  ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå {description}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def validate_cpg_structure(file_path):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¶–ü–ì XML
    """
    print("\nüìã –í–∞–ª–∏–¥–∞—Ü–∏—è –¶–ü–ì —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        ns = {"tns": "http://tspg.service/"}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace –∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if "UpdateCardRequest" in root.tag:
            print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç UpdateCardRequest")
        else:
            print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = {
            "tns:SysCode": "SysCode (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã)",
            "tns:Card": "Card (–∫–∞—Ä—Ç–æ—á–∫–∞)",
            "tns:Ier": "Ier (–æ–±—Ä–∞—â–µ–Ω–∏–µ)",
            ".//tns:Id112": "Id112 (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)",
            ".//tns:Location": "Location (–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)",
            ".//tns:CommonData": "CommonData (–æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ)",
            ".//tns:DdsData01": "DdsData01 (–¥–∞–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã 01)",
            ".//tns:IerIsoTime": "IerIsoTime (–≤—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è)",
            ".//tns:CgPn": "CgPn (–Ω–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ)"
        }
        
        for xpath, description in checks.items():
            element = root.find(xpath, ns)
            if element is not None:
                print(f"  ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå {description}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def compare_files(cssi_path, cpg_path):
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    """
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –§–ê–ô–õ–û–í ===")
    
    # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    cssi_size = os.path.getsize(cssi_path)
    cpg_size = os.path.getsize(cpg_path)
    
    print(f"\nüìä –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
    print(f"  –¶–°–°–ò: {cssi_size} –±–∞–π—Ç")
    print(f"  –¶–ü–ì: {cpg_size} –±–∞–π—Ç")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(cssi_size - cpg_size)} –±–∞–π—Ç ({round(abs(cssi_size - cpg_size) / cssi_size * 100, 1)}%)")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    cssi_tree = ET.parse(cssi_path)
    cpg_tree = ET.parse(cpg_path)
    
    cssi_elements = len(cssi_tree.getroot().findall(".//*"))
    cpg_elements = len(cpg_tree.getroot().findall(".//*"))
    
    print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
    print(f"  –¶–°–°–ò: {cssi_elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print(f"  –¶–ü–ì: {cpg_elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\nüìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¶–°–°–ò:")
    with open(cssi_path, 'r', encoding='utf-8') as f:
        for i, line in enumerate(f):
            if i < 5:
                print(f"  {line.rstrip()}")
            else:
                break
    
    print("\nüìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¶–ü–ì:")
    with open(cpg_path, 'r', encoding='utf-8') as f:
        for i, line in enumerate(f):
            if i < 5:
                print(f"  {line.rstrip()}")
            else:
                break


if __name__ == "__main__":
    print("\n" + "="*80)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–ò–ú–ï–†–û–í XML")
    print("="*80)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
    cssi_file = generate_cssi_example()
    cpg_file = generate_cpg_example()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if cssi_file and cpg_file:
        compare_files(cssi_file, cpg_file)
    
    print("\n" + "="*80)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80)
    
    print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print(f"  –¶–°–°–ò: {cssi_file}")
    print(f"  –¶–ü–ì: {cpg_file}")